(() => {
  const imageURL = prompt("Enter your pixel image URL:");
  const startX = parseInt(prompt("Start X coordinate:", "0"));
  const startY = parseInt(prompt("Start Y coordinate:", "0"));
  if (!imageURL || isNaN(startX) || isNaN(startY)) return alert("❌ Invalid input.");

  const canvas = document.querySelector('canvas');
  if (!canvas || !canvas.parentElement) return alert("❌ WPlace canvas not found.");

  // Create overlay image
  const overlay = document.createElement('img');
  overlay.src = imageURL;
  overlay.style.position = 'absolute';
  overlay.style.imageRendering = 'pixelated';
  overlay.style.pointerEvents = 'none';
  overlay.style.zIndex = '9999';
  overlay.style.transformOrigin = 'top left';
  overlay.style.opacity = '0.6';
  canvas.parentElement.appendChild(overlay);

  // Create UI panel
  const panel = document.createElement('div');
  panel.style = `
    position: fixed;
    bottom: 20px;
    left: 20px;
    background: #222;
    color: #fff;
    padding: 10px;
    font-family: sans-serif;
    font-size: 14px;
    border-radius: 8px;
    z-index: 10000;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
  `;
  panel.innerHTML = `
    <label>Scale: <input type="range" min="0.1" max="5" step="0.1" value="1" id="scaleSlider"></label><br>
    <label>Opacity: <input type="range" min="0.1" max="1" step="0.05" value="0.6" id="opacitySlider"></label><br>
    <button id="hideOverlay">Hide</button>
    <button id="showOverlay" style="display:none;">Show</button>
    <button id="removeOverlay">Remove</button>
  `;
  document.body.appendChild(panel);

  let scale = 1;

  // Sync overlay to canvas transform
  function updateOverlay() {
    const style = getComputedStyle(canvas);
    const matrix = style.transform.match(/matrix`\(([^)]+)\)`/);
    if (!matrix) return;

    const values = matrix[1].split(',').map(parseFloat);
    const canvasScale = values[0]; // scaleX
    const offsetX = values[4];     // translateX
    const offsetY = values[5];     // translateY

    const finalScale = canvasScale;
    const inverseScale = 1 / canvasScale;

    overlay.style.transform = `
      translate(${offsetX + startX * finalScale}px, ${offsetY + startY * finalScale}px)
      scale(${scale * inverseScale})
    `;
  }

  // Observe canvas transform changes
  const observer = new MutationObserver(updateOverlay);
  observer.observe(canvas, { attributes: true, attributeFilter: ['style'] });

  // UI events
  document.getElementById('scaleSlider').addEventListener('input', e => {
    scale = parseFloat(e.target.value);
    updateOverlay();
  });

  document.getElementById('opacitySlider').addEventListener('input', e => {
    overlay.style.opacity = e.target.value;
  });

  document.getElementById('hideOverlay').addEventListener('click', () => {
    overlay.style.display = 'none';
    document.getElementById('hideOverlay').style.display = 'none';
    document.getElementById('showOverlay').style.display = 'inline';
  });

  document.getElementById('showOverlay').addEventListener('click', () => {
    overlay.style.display = 'block';
    document.getElementById('showOverlay').style.display = 'none';
    document.getElementById('hideOverlay').style.display = 'inline';
  });

  document.getElementById('removeOverlay').addEventListener('click', () => {
    overlay.remove();
    panel.remove();
    observer.disconnect();
  });

  updateOverlay();
})();
